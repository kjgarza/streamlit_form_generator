# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-10-12T17:31:23+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field

class Type(Enum):
    activities = 'activities'


class Attributes(BaseModel):
    prov_wasGeneratedBy: Optional[str] = Field(None, alias='prov:wasGeneratedBy')
    prov_generatedAtTime: Optional[str] = Field(None, alias='prov:generatedAtTime')
    prov_wasDerivedFrom: Optional[str] = Field(None, alias='prov:wasDerivedFrom')
    prov_wasAttributedTo: Optional[str] = Field(None, alias='prov:wasAttributedTo')
    action: Optional[str] = None
    version: Optional[float] = None
    changes: Optional[Dict[str, Any]] = None


class Activity(BaseModel):
    id: Optional[str] = Field(None, example='57690e72-b1be-4370-9f35-de6bec5f7b71')
    type: Optional[Type] = None
    attributes: Optional[Attributes] = None


class Type1(Enum):
    clients = 'clients'


class Issn(BaseModel):
    issnl: Optional[str] = None
    print: Optional[str] = None
    electronic: Optional[str] = None


class Type2(Enum):
    client_prefixes = 'client-prefixes'


class Attributes2(BaseModel):
    createdAt: Optional[str] = None
    updatedAt: Optional[str] = None


class Type3(Enum):
    dois = 'dois'


class Event(Enum):
    publish = 'publish'
    register = 'register'
    hide = 'hide'


class Identifier(BaseModel):
    identifier: Optional[str] = None
    identifierType: Optional[str] = None


class AlternateIdentifier(BaseModel):
    alternateIdentifierType: Optional[str] = None
    alternateIdentifier: Optional[str] = None


class ViewsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class DownloadsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class CitationsOverTimeItem(BaseModel):
    yearMonth: Optional[str] = None
    total: Optional[float] = None


class LandingPage(BaseModel):
    checked: Optional[str] = None
    url: Optional[str] = None
    contentType: Optional[str] = None
    error: Optional[str] = None
    redirectCount: Optional[float] = None
    redirectUrls: Optional[List[str]] = None
    downloadLatency: Optional[float] = None
    hasSchemaOrg: Optional[bool] = None
    schemaOrgid: Optional[str] = None
    dcIdentifier: Optional[str] = None
    citationDoi: Optional[str] = None
    bodyhasPid: Optional[bool] = None


class NameIdentifier(BaseModel):
    nameIdentifier: Optional[str] = None
    nameIdentifierScheme: Optional[str] = None
    schemeUri: Optional[str] = None


class AffiliationItem(BaseModel):
    affiliationIdentifier: Optional[str] = None
    affiliationIdentifierScheme: Optional[str] = None
    name: Optional[str] = None
    schemeUri: Optional[str] = None


class Publisher(BaseModel):
    name: Optional[str] = None
    publisherIdentifier: Optional[str] = None
    publisherIdentifierScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    lang: Optional[str] = None


class Container(BaseModel):
    type: Optional[str] = None
    identifier: Optional[str] = None
    identifierType: Optional[str] = None
    title: Optional[str] = None
    volume: Optional[str] = None
    issue: Optional[str] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None


class Subject(BaseModel):
    subject: Optional[str] = None
    subjectScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    valueUri: Optional[str] = None
    lang: Optional[str] = None
    classificationCode: Optional[str] = None


class DateType(Enum):
    Accepted = 'Accepted'
    Available = 'Available'
    Copyrighted = 'Copyrighted'
    Collected = 'Collected'
    Created = 'Created'
    Issued = 'Issued'
    Submitted = 'Submitted'
    Updated = 'Updated'
    Valid = 'Valid'
    Withdrawn = 'Withdrawn'
    Other = 'Other'


class Date(BaseModel):
    date: Optional[str] = None
    dateType: Optional[DateType] = None
    dateInformation: Optional[str] = None


class NumberType(Enum):
    Article = 'Article'
    Chapter = 'Chapter'
    Report = 'Report'
    Other = 'Other'


class RightsListItem(BaseModel):
    rights: Optional[str] = None
    rightsUri: Optional[str] = None
    schemeUri: Optional[str] = None
    rightsIdentifier: Optional[str] = None
    rightsIdentifierScheme: Optional[str] = None
    lang: Optional[str] = None


class DescriptionType(Enum):
    Abstract = 'Abstract'
    Methods = 'Methods'
    SeriesInformation = 'SeriesInformation'
    TableOfContents = 'TableOfContents'
    TechnicalInfo = 'TechnicalInfo'
    Other = 'Other'


class Description(BaseModel):
    description: Optional[str] = None
    descriptionType: Optional[DescriptionType] = None
    lang: Optional[str] = None


class GeoLocationPoint(BaseModel):
    pointLongitude: Optional[str] = None
    pointLatitude: Optional[str] = None


class GeoLocationBox(BaseModel):
    westBoundLongitude: Optional[str] = None
    eastBoundLongitude: Optional[str] = None
    southBoundLatitude: Optional[str] = None
    northBoundLatitude: Optional[str] = None


class GeoLocation(BaseModel):
    geoLocationPoint: Optional[GeoLocationPoint] = None
    geoLocationBox: Optional[GeoLocationBox] = None
    geoLocationPlace: Optional[str] = None


class FunderIdentifierType(Enum):
    Crossref_Funder_ID = 'Crossref Funder ID'
    GRID = 'GRID'
    ISNI = 'ISNI'
    ROR = 'ROR'
    Other = 'Other'


class FundingReference(BaseModel):
    funderName: Optional[str] = None
    funderIdentifier: Optional[str] = None
    funderIdentifierType: Optional[FunderIdentifierType] = None
    awardNumber: Optional[str] = None
    awardUri: Optional[str] = None
    awardTitle: Optional[str] = None


class DoiPropertiesDates(BaseModel):
    created: Optional[str] = Field(
        None, description='The date the DOI record was created in the DataCite system.'
    )
    registered: Optional[str] = Field(
        None, description='The date the DOI was registered in the global handle server.'
    )
    updated: Optional[str] = Field(
        None, description='The date the DOI was last updated.'
    )


class Type5(Enum):
    events = 'events'


class MessageAction(Enum):
    create = 'create'
    add = 'add'


class Type6(Enum):
    prefixes = 'prefixes'


class Attributes6(BaseModel):
    prefix: Optional[str] = None
    createdAt: Optional[str] = None


class Type7(Enum):
    provider_prefixes = 'provider-prefixes'


class Attributes7(BaseModel):
    createdAt: Optional[str] = None
    updatedAt: Optional[str] = None


class Type8(Enum):
    providers = 'providers'


class ProviderContact(BaseModel):
    email: Optional[str] = None
    familyName: Optional[str] = None
    givenName: Optional[str] = None


class ReportingPeriod(BaseModel):
    end_date: Optional[str] = Field(None, alias='end-date', example='2018-04-30')
    begin_date: Optional[str] = Field(None, alias='begin-date', example='2018-04-01')


class Exception(BaseModel):
    code: Optional[float] = None
    data: Optional[str] = None
    message: Optional[str] = None
    help_url: Optional[str] = Field(None, alias='help-url')
    severity: Optional[str] = None


class ReportHeader(BaseModel):
    report_name: str = Field(
        ...,
        alias='report-name',
        description='The long name of the report.',
        example='Dataset Report',
    )
    report_id: str = Field(
        ...,
        alias='report-id',
        description='The report ID or code or shortname. Typically this will be the same code provided in the Report parameter of the request.',
        example='DSR',
    )
    release: str = Field(
        ..., description='The release or version of the report.', example='RD1'
    )
    created_by: str = Field(
        ...,
        alias='created-by',
        description='Name of the organization producing the report.',
        example='DataONE',
    )
    created: Optional[str] = Field(
        None,
        description='Time the report was prepared. Format as defined by date-time - RFC3339',
        example='2019-09-08T22:47:31Z',
    )
    reporting_period: ReportingPeriod = Field(
        ..., alias='reporting-period', description='Time the report was prepared.'
    )
    report_filters: Optional[List[str]] = Field(
        None,
        alias='report-filters',
        description='Zero or more report filters used for this report. Typically reflect filters provided on the Request. Filters limit the data to be reported on.',
    )
    report_attributes: Optional[List[str]] = Field(
        None,
        alias='report-attributes',
        description='Zero or more additional attributes applied to the report. Attributes inform the level of detail in the report.',
    )
    exceptions: Optional[List[Exception]] = None


class DatasetIdItem(BaseModel):
    type: Optional[str] = Field(None, example='doi')
    value: Optional[str] = Field(None, example='10.15146/R3J66V')


class Period(BaseModel):
    end_date: Optional[str] = Field(None, alias='end-date', example='2018-04-30')
    begin_date: Optional[str] = Field(None, alias='begin-date', example='2018-04-01')


class MetricType(Enum):
    total_dataset_requests = 'total-dataset-requests'
    unique_dataset_requests = 'unique-dataset-requests'
    total_dataset_investigations = 'total-dataset-investigations'
    unique_dataset_investigations = 'unique-dataset-investigations'


class AccessMethod(Enum):
    regular = 'regular'
    machine = 'machine'


class InstanceItem(BaseModel):
    count: Optional[float] = Field(None, example=20)
    metric_type: Optional[MetricType] = Field(
        None,
        alias='metric-type',
        description='Type of activity being counted.',
        example='unique-dataset-requests',
    )
    access_method: Optional[AccessMethod] = Field(
        None,
        alias='access-method',
        description="Identifies if the usage activity was 'Regular' usage - a user doing research on a content site, or if the usage activity was 'Machine' - for the purpose of retrieving content for Text and Data Mining (TDM).",
        example='regular',
    )


class PerformanceItem(BaseModel):
    period: Optional[Period] = None
    instance: Optional[List[InstanceItem]] = None


class PublisherIdItem(BaseModel):
    type: Optional[str] = Field(None, example='ror')
    value: Optional[str] = Field(None, example='https://ror.org/04wxnsj81')


class Type9(Enum):
    pub_date = 'pub-date'
    first_accessed_online = 'first-accessed-online'
    proprietary = 'proprietary'


class DatasetDate(BaseModel):
    type: Optional[Type9] = Field(None, example='pub-date')
    value: Optional[str] = Field(None, example='2017-12-31')


class Type10(Enum):
    name = 'name'
    orcid = 'orcid'
    isni = 'isni'


class DatasetContributor(BaseModel):
    type: Optional[Type10] = Field(None, example='name')
    value: Optional[str] = Field(
        None,
        description='Value of the contributor identifier.',
        example='Cassandra Lopez',
    )


class ReportDataset(BaseModel):
    uri: Optional[str] = Field(
        None,
        example='https://cn.dataone.org/cn/v2/resolve/doi%3A10.5063%2FAA%2Fnceas.985.1',
    )
    yop: Optional[str] = Field(
        None,
        description="Year of publication in the format of 'yyyy'. Use '0001' for unknown and '9999' for articles in press.",
        example='2010',
    )
    platform: Optional[str] = Field(
        None, description='Name of the platform.', example='DataONE'
    )
    data_type: Optional[str] = Field(
        None,
        alias='data-type',
        description='Nature of the dataset being reported.',
        example='dataset',
    )
    publisher: Optional[str] = Field(
        None, description='Name of publisher of the dataset.', example='DataONE'
    )
    dataset_id: Optional[List[DatasetIdItem]] = Field(
        None, alias='dataset-id', description='The identifier for the report dataset.'
    )
    performance: Optional[List[PerformanceItem]] = None
    publisher_id: Optional[List[PublisherIdItem]] = Field(None, alias='publisher-id')
    dataset_dates: Optional[List[DatasetDate]] = Field(None, alias='dataset-dates')
    dataset_title: Optional[str] = Field(
        None,
        alias='dataset-title',
        description='Name of the dataset being reported.',
        example='Lake Erie Fish Community Data',
    )
    dataset_contributors: Optional[List[DatasetContributor]] = Field(
        None,
        alias='dataset-contributors',
        description='The identifier for contributor (i.e. creator) of the dataset.',
    )


class ReportSubset(BaseModel):
    gzip: Optional[str] = None
    checksum: Optional[str] = None


class Report(BaseModel):
    id: Optional[str] = Field(None, example='003fadc1-daab-4d1e-97d1-96004c1ff529')
    report_header: Optional[ReportHeader] = Field(None, alias='report-header')
    report_datasets: List[ReportDataset] = Field(
        ...,
        alias='report-datasets',
        description='Defines the output for the Report_Datasets being returned in a Dataset Report. Collection of datasets from the report.',
    )
    report_subsets: Optional[List[ReportSubset]] = Field(None, alias='report-subsets')


class DataObject(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None


class DataArray(BaseModel):
    __root__: List[DataObject]


class MetaObject(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    count: Optional[float] = None


class MetaArray(BaseModel):
    __root__: List[MetaObject]


class MetaCore(BaseModel):
    total: Optional[float] = Field(None, description='Total results count.')
    totalPages: Optional[float] = Field(None, description='Total pages count.')
    page: Optional[float] = Field(None, description='Current page of the results.')


class Links(BaseModel):
    self: Optional[str] = None
    next: Optional[str] = None


class RelationType(Enum):
    IsCitedBy = 'IsCitedBy'
    Cites = 'Cites'
    IsSupplementTo = 'IsSupplementTo'
    IsSupplementedBy = 'IsSupplementedBy'
    IsContinuedBy = 'IsContinuedBy'
    Continues = 'Continues'
    IsDescribedBy = 'IsDescribedBy'
    Describes = 'Describes'
    HasMetadata = 'HasMetadata'
    IsMetadataFor = 'IsMetadataFor'
    HasVersion = 'HasVersion'
    IsVersionOf = 'IsVersionOf'
    IsNewVersionOf = 'IsNewVersionOf'
    IsPreviousVersionOf = 'IsPreviousVersionOf'
    IsPartOf = 'IsPartOf'
    HasPart = 'HasPart'
    IsPublishedIn = 'IsPublishedIn'
    IsReferencedBy = 'IsReferencedBy'
    References = 'References'
    IsDocumentedBy = 'IsDocumentedBy'
    Documents = 'Documents'
    IsCompiledBy = 'IsCompiledBy'
    Compiles = 'Compiles'
    IsVariantFormOf = 'IsVariantFormOf'
    IsOriginalFormOf = 'IsOriginalFormOf'
    IsIdenticalTo = 'IsIdenticalTo'
    IsReviewedBy = 'IsReviewedBy'
    Reviews = 'Reviews'
    IsDerivedFrom = 'IsDerivedFrom'
    IsSourceOf = 'IsSourceOf'
    IsRequiredBy = 'IsRequiredBy'
    Requires = 'Requires'
    IsObsoletedBy = 'IsObsoletedBy'
    Obsoletes = 'Obsoletes'
    IsCollectedBy = 'IsCollectedBy'
    Collects = 'Collects'


class ResourceTypeGeneral(Enum):
    Audiovisual = 'Audiovisual'
    Book = 'Book'
    BookChapter = 'BookChapter'
    Collection = 'Collection'
    ComputationalNotebook = 'ComputationalNotebook'
    ConferencePaper = 'ConferencePaper'
    ConferenceProceeding = 'ConferenceProceeding'
    DataPaper = 'DataPaper'
    Dataset = 'Dataset'
    Dissertation = 'Dissertation'
    Event = 'Event'
    Image = 'Image'
    Instrument = 'Instrument'
    InteractiveResource = 'InteractiveResource'
    Journal = 'Journal'
    JournalArticle = 'JournalArticle'
    Model = 'Model'
    OutputManagementPlan = 'OutputManagementPlan'
    PeerReview = 'PeerReview'
    PhysicalObject = 'PhysicalObject'
    Preprint = 'Preprint'
    Report = 'Report'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    Standard = 'Standard'
    StudyRegistration = 'StudyRegistration'
    Text = 'Text'
    Workflow = 'Workflow'
    Other = 'Other'


class ContributorType(Enum):
    ContactPerson = 'ContactPerson'
    DataCollector = 'DataCollector'
    DataCurator = 'DataCurator'
    DataManager = 'DataManager'
    Distributor = 'Distributor'
    Editor = 'Editor'
    HostingInstitution = 'HostingInstitution'
    Producer = 'Producer'
    ProjectLeader = 'ProjectLeader'
    ProjectManager = 'ProjectManager'
    ProjectMember = 'ProjectMember'
    RegistrationAgency = 'RegistrationAgency'
    RegistrationAuthority = 'RegistrationAuthority'
    RelatedPerson = 'RelatedPerson'
    Researcher = 'Researcher'
    ResearchGroup = 'ResearchGroup'
    RightsHolder = 'RightsHolder'
    Sponsor = 'Sponsor'
    Supervisor = 'Supervisor'
    WorkPackageLeader = 'WorkPackageLeader'
    Other = 'Other'


class RelatedIdentifierType(Enum):
    ARK = 'ARK'
    arXiv = 'arXiv'
    bibcode = 'bibcode'
    DOI = 'DOI'
    EAN13 = 'EAN13'
    EISSN = 'EISSN'
    Handle = 'Handle'
    IGSN = 'IGSN'
    ISBN = 'ISBN'
    ISSN = 'ISSN'
    ISTC = 'ISTC'
    LISSN = 'LISSN'
    LSID = 'LSID'
    PMID = 'PMID'
    PURL = 'PURL'
    UPC = 'UPC'
    URL = 'URL'
    URN = 'URN'
    w3id = 'w3id'


class TitleType(Enum):
    AlternativeTitle = 'AlternativeTitle'
    Subtitle = 'Subtitle'
    TranslatedTitle = 'TranslatedTitle'
    Other = 'Other'


class NameType(Enum):
    Personal = 'Personal'
    Organizational = 'Organizational'


class Certificate(Enum):
    CLARIN = 'CLARIN'
    CoreTrustSeal = 'CoreTrustSeal'
    DIN_31644 = 'DIN 31644'
    DINI = 'DINI'
    DSA = 'DSA'
    RatSWD = 'RatSWD'
    WDS = 'WDS'


class ClientType(Enum):
    repository = 'repository'
    periodical = 'periodical'
    igsnCatalog = 'igsnCatalog'
    raidRegistry = 'raidRegistry'


class State(Enum):
    findable = 'findable'
    registered = 'registered'
    draft = 'draft'


class Source(Enum):
    mds = 'mds'
    api = 'api'
    fabricaForm = 'fabricaForm'
    fabrica = 'fabrica'
    ez = 'ez'


class Region(Enum):
    AMER = 'AMER'
    APAC = 'APAC'
    EMEA = 'EMEA'


class MemberType(Enum):
    consortium_organization = 'consortium_organization'
    direct_member = 'direct_member'
    consortium = 'consortium'
    member_only = 'member_only'
    developer = 'developer'


class OrganizationTypeEnum(Enum):
    academicInstitution = 'academicInstitution'
    governmentAgency = 'governmentAgency'
    nationalInstitution = 'nationalInstitution'
    publisher = 'publisher'
    professionalSociety = 'professionalSociety'
    researchInstitution = 'researchInstitution'
    serviceProvider = 'serviceProvider'
    internationalOrganization = 'internationalOrganization'
    other = 'other'


class OrganizationType(BaseModel):
    __root__: Optional[OrganizationTypeEnum] = None


class FocusAreaEnum(Enum):
    naturalSciences = 'naturalSciences'
    engineeringAndTechnology = 'engineeringAndTechnology'
    medicalAndHealthSciences = 'medicalAndHealthSciences'
    agriculturalSciences = 'agriculturalSciences'
    socialSciences = 'socialSciences'
    humanities = 'humanities'
    general = 'general'


class FocusArea(BaseModel):
    __root__: Optional[FocusAreaEnum] = None


class SourceId(Enum):
    datacite_usage = 'datacite-usage'
    datacite_related = 'datacite-related'
    datacite_crossref = 'datacite-crossref'
    datacite_kisti = 'datacite-kisti'
    datacite_op = 'datacite-op'
    datacite_medra = 'datacite-medra'
    datacite_istic = 'datacite-istic'
    datacite_funder = 'datacite-funder'
    datacite_orcid_auto_update = 'datacite-orcid-auto-update'
    datacite_url = 'datacite-url'
    crossref = 'crossref'


class RelationTypeId(Enum):
    is_cited_by = 'is-cited-by'
    cites = 'cites'
    is_supplement_to = 'is-supplement-to'
    is_supplemented_by = 'is-supplemented-by'
    is_continued_by = 'is-continued-by'
    continues = 'continues'
    is_described_by = 'is-described-by'
    describes = 'describes'
    has_metadata = 'has-metadata'
    is_metadata_for = 'is-metadata-for'
    has_version = 'has-version'
    is_version_of = 'is-version-of'
    is_new_version_of = 'is-new-version-of'
    is_previous_version_of = 'is-previous-version-of'
    is_part_of = 'is-part-of'
    has_part = 'has-part'
    is_published_in = 'is-published-in'
    is_referenced_by = 'is-referenced-by'
    references = 'references'
    is_documented_by = 'is-documented-by'
    documents = 'documents'
    is_compiled_by = 'is-compiled-by'
    compiles = 'compiles'
    is_variant_form_of = 'is-variant-form-of'
    is_original_form_of = 'is-original-form-of'
    is_identical_to = 'is-identical-to'
    is_reviewed_by = 'is-reviewed-by'
    reviews = 'reviews'
    is_derived_from = 'is-derived-from'
    is_source_of = 'is-source-of'
    is_required_by = 'is-required-by'
    requires = 'requires'
    is_obsoleted_by = 'is-obsoleted-by'
    obsoletes = 'obsoletes'
    is_collected_by = 'is-collected-by'
    collects = 'collects'
    is_authored_by = 'is-authored-by'
    is_authored_at = 'is-authored-at'
    is_funded_by = 'is-funded-by'
    total_dataset_investigations_regular = 'total-dataset-investigations-regular'
    unique_dataset_investigations_regular = 'unique-dataset-investigations-regular'
    total_dataset_requests_regular = 'total-dataset-requests-regular'
    unique_dataset_requests_regular = 'unique-dataset-requests-regular'
    total_dataset_investigations_machine = 'total-dataset-investigations-machine'
    unique_dataset_investigations_machine = 'unique-dataset-investigations-machine'
    total_dataset_requests_machine = 'total-dataset-requests-machine'
    unique_dataset_requests_machine = 'unique-dataset-requests-machine'


class ViewCount(BaseModel):
    __root__: float = Field(..., description='Total views, pulled from Event Data.')


class DownloadCount(BaseModel):
    __root__: float = Field(..., description='Total downloads, pulled from Event Data.')


class ReferenceCount(BaseModel):
    __root__: float = Field(
        ..., description='Total references, pulled from Event Data.'
    )


class CitationCount(BaseModel):
    __root__: float = Field(..., description='Total citations, pulled from Event Data.')


class PartCount(BaseModel):
    __root__: float = Field(
        ..., description='Total number of parts, pulled from Event Data.'
    )


class PartOfCount(BaseModel):
    __root__: float = Field(
        ..., description='Total number of parents, pulled from Event Data.'
    )


class VersionCount(BaseModel):
    __root__: float = Field(
        ..., description='Total number of versions, pulled from Event Data.'
    )


class VersionOfCount(BaseModel):
    __root__: float = Field(
        ...,
        description='Total number to which this DOI is a version, pulled from Event Data.',
    )


class Attributes1(BaseModel):
    name: Optional[str] = None
    symbol: Optional[str] = None
    year: Optional[float] = None
    contactEmail: Optional[str] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    alternateName: Optional[str] = None
    description: Optional[str] = None
    language: Optional[List[str]] = None
    clientType: Optional[ClientType] = None
    domains: Optional[str] = None
    re3data: Optional[str] = None
    opendoar: Optional[str] = None
    issn: Optional[Issn] = None
    url: Optional[str] = None
    created: Optional[str] = None
    updated: Optional[str] = None
    isActive: Optional[bool] = None
    hasPassword: Optional[bool] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )


class Provider(BaseModel):
    data: Optional[DataObject] = None


class Consortium(BaseModel):
    data: Optional[DataObject] = None


class Prefixes(BaseModel):
    data: Optional[DataArray] = None


class Relationships(BaseModel):
    provider: Optional[Provider] = None
    consortium: Optional[Consortium] = Field(
        None,
        description='Returned only when the client is associated with a Consortium.',
    )
    prefixes: Optional[Prefixes] = None


class Client(BaseModel):
    id: str
    type: Optional[Type1] = None
    attributes: Optional[Attributes1] = None
    relationships: Optional[Relationships] = None


class Client1(BaseModel):
    data: Optional[DataObject] = None


class ProviderPrefix(BaseModel):
    data: Optional[DataObject] = None


class Prefix(BaseModel):
    data: Optional[DataObject] = None


class Relationships1(BaseModel):
    client: Optional[Client1] = None
    provider: Optional[Provider] = None
    providerPrefix: Optional[ProviderPrefix] = None
    prefix: Optional[Prefix] = None


class ClientPrefix(BaseModel):
    id: str
    type: Optional[Type2] = None
    attributes: Optional[Attributes2] = None
    relationships: Optional[Relationships1] = None


class Media(BaseModel):
    data: Optional[DataObject] = None


class References(BaseModel):
    data: Optional[DataArray] = None


class Citations(BaseModel):
    data: Optional[DataArray] = None


class Parts(BaseModel):
    data: Optional[DataArray] = None


class PartOf(BaseModel):
    data: Optional[DataArray] = None


class Versions(BaseModel):
    data: Optional[DataArray] = None


class VersionOf(BaseModel):
    data: Optional[DataArray] = None


class Relationships2(BaseModel):
    client: Optional[Client1] = Field(
        None, description='The DataCite client (repository) associated with the DOI.'
    )
    provider: Optional[Provider] = Field(
        None,
        description='The DataCite provider (Direct Member or Consortium Organization) associated with the DOI.',
    )
    media: Optional[Media] = Field(
        None, description='Legacy attribute for media support.'
    )
    references: Optional[References] = Field(
        None, description='An array of references as dictionaries.'
    )
    citations: Optional[Citations] = Field(
        None, description='An array of citations as dictionaries.'
    )
    parts: Optional[Parts] = Field(
        None, description='An array of parts as dictionaries.'
    )
    partOf: Optional[PartOf] = Field(
        None, description='An array of parents as dictionaries.'
    )
    versions: Optional[Versions] = Field(
        None, description='An array of versions as dictionaries.'
    )
    versionOf: Optional[VersionOf] = Field(
        None,
        description='An array of objects to which this DOI is a version as dictionaries.',
    )


class Relationships3(BaseModel):
    client: Optional[Client1] = None


class Creator(BaseModel):
    nameType: Optional[NameType] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = None
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    affiliation: Optional[Union[List[AffiliationItem], List[str]]] = Field(
        None,
        description='Set `affiliation=true` to see additional affiliation information such as the affiliation identifier.',
    )
    lang: Optional[str] = None


class Title(BaseModel):
    title: Optional[str] = None
    titleType: Optional[TitleType] = None
    lang: Optional[str] = None


class Contributor(BaseModel):
    nameType: Optional[NameType] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = None
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    affiliation: Optional[Union[List[AffiliationItem], List[str]]] = Field(
        None,
        description='Set `affiliation=true` to see additional affiliation information such as the affiliation identifier.',
    )
    contributorType: Optional[ContributorType] = None
    lang: Optional[str] = None


class Types(BaseModel):
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None
    resourceType: Optional[str] = Field(
        None,
        description='[DataCite Metadata Schema: ResourceType](https://datacite-metadata-schema.readthedocs.io/en/4/properties/resourcetype/)',
    )
    schemaOrg: Optional[str] = None
    bibtex: Optional[str] = None
    citeproc: Optional[str] = None
    ris: Optional[str] = None


class RelatedIdentifier(BaseModel):
    relatedIdentifier: Optional[str] = None
    relatedIdentifierType: Optional[RelatedIdentifierType] = None
    relationType: Optional[RelationType] = None
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None
    relatedMetadataScheme: Optional[str] = None
    schemeUri: Optional[str] = None
    schemeType: Optional[str] = None


class RelatedItemIdentifier(BaseModel):
    relatedItemIdentifier: Optional[str] = None
    relatedItemIdentifierType: Optional[RelatedIdentifierType] = None
    relatedMetadataScheme: Optional[str] = None
    schemeURI: Optional[str] = None
    schemeType: Optional[str] = None


class Creator1(BaseModel):
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameType: Optional[NameType] = None


class Title1(BaseModel):
    title: Optional[str] = None
    titleType: Optional[TitleType] = None


class Contributor1(BaseModel):
    name: Optional[str] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameType: Optional[NameType] = None
    contributorType: Optional[ContributorType] = None


class RelatedItem(BaseModel):
    relatedItemType: Optional[ResourceTypeGeneral] = None
    relationType: Optional[RelationType] = None
    relatedItemIdentifier: Optional[RelatedItemIdentifier] = None
    creators: Optional[List[Creator1]] = None
    titles: Optional[List[Title1]] = None
    volume: Optional[str] = None
    issue: Optional[str] = None
    number: Optional[str] = None
    numberType: Optional[NumberType] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None
    publisher: Optional[str] = None
    publicationYear: Optional[str] = None
    edition: Optional[str] = None
    contributors: Optional[List[Contributor1]] = None


class DoiPropertiesMetadata(BaseModel):
    creators: Optional[List[Creator]] = Field(
        None,
        description='[DataCite Metadata Schema: Creator](https://datacite-metadata-schema.readthedocs.io/en/4/properties/creator/)',
    )
    titles: Optional[List[Title]] = Field(
        None,
        description='[DataCite Metadata Schema: Title](https://datacite-metadata-schema.readthedocs.io/en/4/properties/title/)',
    )
    publisher: Optional[Union[Publisher, str]] = Field(
        None,
        description='[DataCite Metadata Schema: Publisher](https://datacite-metadata-schema.readthedocs.io/en/4/properties/publisher/) Set `publisher=true` to see additional publisher information such as the publisher identifier.\n',
    )
    container: Optional[Container] = None
    publicationYear: Optional[int] = Field(
        None,
        description='[DataCite Metadata Schema: PublicationYear](https://datacite-metadata-schema.readthedocs.io/en/4/properties/publicationyear/)',
    )
    subjects: Optional[List[Subject]] = Field(
        None,
        description='[DataCite Metadata Schema: Subject](https://datacite-metadata-schema.readthedocs.io/en/4/properties/subject/)',
    )
    contributors: Optional[List[Contributor]] = Field(
        None,
        description='[DataCite Metadata Schema: Contributor](https://datacite-metadata-schema.readthedocs.io/en/4/properties/contributor/)',
    )
    dates: Optional[List[Date]] = Field(
        None,
        description='[DataCite Metadata Schema: Date](https://datacite-metadata-schema.readthedocs.io/en/4/properties/date/)',
    )
    language: Optional[str] = Field(
        None,
        description='[DataCite Metadata Schema: Language](https://datacite-metadata-schema.readthedocs.io/en/4/properties/language/)',
    )
    types: Optional[Types] = None
    relatedIdentifiers: Optional[List[RelatedIdentifier]] = Field(
        None,
        description='[DataCite Metadata Schema: RelatedIdentifier](https://datacite-metadata-schema.readthedocs.io/en/4/properties/relatedidentifier/)',
    )
    relatedItems: Optional[List[RelatedItem]] = Field(
        None,
        description='[DataCite Metadata Schema: RelatedItem](https://datacite-metadata-schema.readthedocs.io/en/4/properties/relateditem/)',
    )
    sizes: Optional[List[str]] = Field(
        None,
        description='[DataCite Metadata Schema: Size](https://datacite-metadata-schema.readthedocs.io/en/4/properties/size/)',
    )
    formats: Optional[List[str]] = Field(
        None,
        description='[DataCite Metadata Schema: Format](https://datacite-metadata-schema.readthedocs.io/en/4/properties/format/)',
    )
    version: Optional[str] = Field(
        None,
        description='[DataCite Metadata Schema: Version](https://datacite-metadata-schema.readthedocs.io/en/4/properties/version/)',
    )
    rightsList: Optional[List[RightsListItem]] = Field(
        None,
        description='[DataCite Metadata Schema: Rights](https://datacite-metadata-schema.readthedocs.io/en/4/properties/rights/)',
    )
    descriptions: Optional[List[Description]] = Field(
        None,
        description='[DataCite Metadata Schema: Description](https://datacite-metadata-schema.readthedocs.io/en/4/properties/description/)',
    )
    geoLocations: Optional[List[GeoLocation]] = Field(
        None,
        description='[DataCite Metadata Schema: GeoLocation](https://datacite-metadata-schema.readthedocs.io/en/4/properties/geolocation/)',
    )
    fundingReferences: Optional[List[FundingReference]] = Field(
        None,
        description='[DataCite Metadata Schema: FundingReference](https://datacite-metadata-schema.readthedocs.io/en/4/properties/fundingreference/)',
    )


class DoiPropertiesOther(BaseModel):
    url: Optional[str] = Field(None, description='The landing page URL of the DOI.')
    contentUrl: Optional[List[str]] = Field(
        None, description='An array of content URLs associated with the DOI.'
    )
    metadataVersion: Optional[float] = Field(
        None,
        description='The version of the stored DataCite metadata, incremented once per update.',
    )
    schemaVersion: Optional[str] = Field(
        None,
        description='The DataCite Metadata Schema version of the stored DOI metadata represented as a URL. When creating or updating a DOI, `schemaVersion` is not necessary unless modifying the DataCite Metadata Schema version.',
    )
    source: Optional[Source] = None
    isActive: Optional[bool] = Field(
        None,
        description='"true" if the DOI is in [Findable state](https://support.datacite.org/docs/doi-states#findable-doi-name). Otherwise, "false".',
    )
    state: Optional[State] = None
    reason: Optional[str] = Field(
        None, description='Legacy attribute for EZID compatibility.'
    )


class Subj(BaseModel):
    data: Optional[DataObject] = None


class Obj(BaseModel):
    data: Optional[DataObject] = None


class Relationships4(BaseModel):
    subj: Optional[Subj] = None
    obj: Optional[Obj] = None


class Attributes5(BaseModel):
    subj_id: Optional[str] = Field(None, alias='subj-id')
    obj_id: Optional[str] = Field(None, alias='obj-id')
    source_id: Optional[SourceId] = Field(None, alias='source-id')
    relation_type_id: Optional[RelationTypeId] = Field(None, alias='relation-type-id')
    total: Optional[float] = None
    message_action: Optional[MessageAction] = Field(None, alias='message-action')
    source_token: Optional[str] = Field(None, alias='source-token')
    license: Optional[str] = None
    occured_at: Optional[str] = Field(None, alias='occured-at')
    timestamp: Optional[str] = None
    relationships: Optional[Relationships4] = None


class Event1(BaseModel):
    id: str
    type: Optional[Type5] = None
    attributes: Optional[Attributes5] = None


class Clients(BaseModel):
    data: Optional[DataArray] = None


class Providers(BaseModel):
    data: Optional[DataArray] = None


class ClientPrefixes(BaseModel):
    data: Optional[DataArray] = None


class ProviderPrefixes(BaseModel):
    data: Optional[DataArray] = None


class Relationships5(BaseModel):
    clients: Optional[Clients] = None
    providers: Optional[Providers] = None
    clientPrefixes: Optional[ClientPrefixes] = None
    providerPrefixes: Optional[ProviderPrefixes] = None


class Prefix1(BaseModel):
    id: Optional[str] = None
    type: Optional[Type6] = None
    attributes: Optional[Attributes6] = None
    relationships: Optional[Relationships5] = None


class Prefix2(BaseModel):
    data: Optional[DataObject] = None


class Relationships6(BaseModel):
    provider: Optional[Provider] = None
    prefix: Optional[Prefix2] = None
    clients: Optional[Clients] = None
    clientPrefixes: Optional[ClientPrefixes] = None


class ProviderPrefix1(BaseModel):
    id: str
    type: Optional[Type7] = None
    attributes: Optional[Attributes7] = None
    relationships: Optional[Relationships6] = None


class Attributes8(BaseModel):
    name: Optional[str] = None
    displayName: Optional[str] = None
    symbol: Optional[str] = None
    website: Optional[str] = None
    systemEmail: Optional[str] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    groupEmail: Optional[str] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    globusUuid: Optional[str] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    description: Optional[str] = None
    region: Optional[Region] = None
    country: Optional[str] = None
    logoUrl: Optional[str] = None
    memberType: Optional[MemberType] = None
    organizationType: Optional[OrganizationType] = None
    focusArea: Optional[FocusArea] = None
    nonProfitStatus: Optional[str] = None
    isActive: Optional[bool] = None
    hasPassword: Optional[bool] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    joined: Optional[str] = None
    twitterHandle: Optional[str] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    rorId: Optional[str] = None
    technicalContact: Optional[ProviderContact] = None
    secondaryTechnicalContact: Optional[ProviderContact] = None
    billingContact: Optional[ProviderContact] = None
    secondaryBillingContact: Optional[ProviderContact] = None
    serviceContact: Optional[ProviderContact] = None
    secondaryServiceContact: Optional[ProviderContact] = None
    votingContact: Optional[ProviderContact] = None
    hasRequiredContacts: Optional[bool] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    created: Optional[str] = None
    updated: Optional[str] = None
    doiEstimate: Optional[float] = None


class Contacts(BaseModel):
    data: Optional[DataArray] = None


class ConsortiumOrganizations(BaseModel):
    data: Optional[DataArray] = None


class Relationships7(BaseModel):
    clients: Optional[Clients] = None
    prefixes: Optional[Prefixes] = None
    contacts: Optional[Contacts] = Field(
        None,
        description='Returned only when authenticated with associated credentials.',
    )
    consortium: Optional[Consortium] = Field(
        None,
        description='Returned only when the provider is a Consortium Organization.',
    )
    consortiumOrganizations: Optional[ConsortiumOrganizations] = Field(
        None, description='Returned only when the provider is a Consortium.'
    )


class Provider4(BaseModel):
    id: str
    type: Optional[Type8] = None
    attributes: Optional[Attributes8] = None
    relationships: Optional[Relationships7] = None


class Temporal(BaseModel):
    this_month: Optional[List[MetaObject]] = None
    this_year: Optional[List[MetaObject]] = None
    last_year: Optional[List[MetaObject]] = None
    two_years_ago: Optional[List[MetaObject]] = None


class TotalsObject(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    count: Optional[float] = None
    temporal: Optional[Temporal] = None
    states: Optional[List[MetaObject]] = None


class Attributes3(DoiPropertiesMetadata, DoiPropertiesOther, DoiPropertiesDates):
    doi: Optional[str] = Field(None, description='The full DOI name.')
    event: Optional[Event] = Field(
        None,
        description='Can be set to trigger a [DOI state change](https://support.datacite.org/docs/updating-metadata-with-the-rest-api#changing-the-doi-state). When not set, a [Draft record](https://support.datacite.org/docs/doi-states#draft-record) is created.\n  * `publish` - Create a DOI in [Findable state](https://support.datacite.org/docs/doi-states#findable-doi-name) (or change an existing Draft record/Registered DOI to Findable state).\n  * `register` - Create a DOI in [Registered state](https://support.datacite.org/docs/doi-states#registered-doi-name) (or change an existing Draft record to Registered state).\n  * `hide` - Change a DOI from Findable to Registered state.\n',
    )
    prefix: Optional[str] = Field(None, description='The DOI prefix.')
    suffix: Optional[str] = Field(None, description='The DOI suffix.')
    identifiers: Optional[List[Identifier]] = Field(
        None,
        description='Equivalent to the [AlternateIdentifier](https://datacite-metadata-schema.readthedocs.io/en/4/properties/alternateidentifier/) property in the DataCite Metadata Schema. For more information, see [What is the "identifiers" attribute in the REST API?](https://support.datacite.org/docs/what-is-the-identifiers-attribute-in-the-rest-api)',
    )
    alternateIdentifiers: Optional[List[AlternateIdentifier]] = Field(
        None,
        description='[DataCite Metadata Schema: AlternateIdentifier](https://datacite-metadata-schema.readthedocs.io/en/4/properties/alternateidentifier/)',
    )
    xml: Optional[str] = Field(
        None, description='DataCite Metadata Schema XML encoded in Base64 format.'
    )
    viewCount: Optional[ViewCount] = None
    viewsOverTime: Optional[List[ViewsOverTimeItem]] = None
    downloadCount: Optional[DownloadCount] = None
    downloadsOverTime: Optional[List[DownloadsOverTimeItem]] = None
    referenceCount: Optional[ReferenceCount] = None
    citationCount: Optional[CitationCount] = None
    citationsOverTime: Optional[List[CitationsOverTimeItem]] = None
    partCount: Optional[PartCount] = None
    partOfCount: Optional[PartOfCount] = None
    versionCount: Optional[VersionCount] = None
    versionOfCount: Optional[VersionOfCount] = None
    landingPage: Optional[LandingPage] = Field(
        None, description='Data describing the landing page, used by link checking.'
    )


class Data(BaseModel):
    id: Optional[str] = None
    type: Type3
    attributes: Optional[Attributes3] = None
    relationships: Optional[Relationships2] = None


class DoiDetailItem(BaseModel):
    data: Optional[Data] = None


class Attributes4(DoiPropertiesMetadata, DoiPropertiesOther, DoiPropertiesDates):
    doi: Optional[str] = None
    identifiers: Optional[List[Identifier]] = None
    viewCount: Optional[ViewCount] = None
    downloadCount: Optional[DownloadCount] = None
    referenceCount: Optional[ReferenceCount] = None
    citationCount: Optional[CitationCount] = None
    partCount: Optional[PartCount] = None
    partOfCount: Optional[PartOfCount] = None
    versionCount: Optional[VersionCount] = None
    versionOfCount: Optional[VersionOfCount] = None
    publisher: Union[Publisher, str] = Field(
        ...,
        description='[DataCite Metadata Schema: Publisher](https://datacite-metadata-schema.readthedocs.io/en/4/properties/publisher/) Set `publisher=true` to see additional publisher information such as the publisher identifier.\n',
    )
    publicationYear: int = Field(
        ...,
        description='[DataCite Metadata Schema: PublicationYear](https://datacite-metadata-schema.readthedocs.io/en/4/properties/publicationyear/)',
    )


class DoiListItem(BaseModel):
    id: Optional[str] = None
    type: Type3
    attributes: Optional[Attributes4] = None
    relationships: Optional[Relationships3] = None
